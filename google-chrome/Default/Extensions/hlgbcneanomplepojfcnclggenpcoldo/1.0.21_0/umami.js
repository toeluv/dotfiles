(t=>{const{screen:{width:e,height:a},navigator:{language:r},location:n,localStorage:i,document:s,history:o}=t,{hostname:c,pathname:l,search:u}=n,{currentScript:d}=s;if(!d)return;const p=(t,e)=>(Object.keys(e).forEach((a=>{void 0!==e[a]&&(t[a]=e[a])})),t),h=(t,e,a)=>{const r=t[e];return(...e)=>(a.apply(null,e),r.apply(t,e))},m=()=>i&&i.getItem("umami.disabled")||v&&(()=>{const{doNotTrack:e,navigator:a,external:r}=t,n="msTrackingProtectionEnabled",i=e||a.doNotTrack||a.msDoNotTrack||r&&n in r&&r[n]();return"1"==i||"yes"===i})()||S&&!k.includes(c),b="false",g=d.getAttribute.bind(d),f=g("data-website-id"),y=g("data-auto-track")!==b,v=g("data-do-not-track"),w=g("data-css-events")!==b,S=g("data-domains")||"",k=S.split(",").map((t=>t.trim())),E=`${e}x${a}`,T=/^umami--([a-z]+)--([\w]+[\w-]*)$/;let x,A={},N=`${l}${u}`,$=s.referrer;const O=()=>({website:f,hostname:c,screen:E,language:r,url:N}),j=(t,e)=>{if(!m())return fetch("https://342251b-beta.perplexity.ai/api/342251b",{method:"POST",body:JSON.stringify({type:t,payload:e}),headers:p({"Content-Type":"application/json"},{"x-umami-cache":x})}).then((t=>t.text())).then((t=>x=t))},K=(t=N,e=$,a=f)=>j("pageview",p(O(),{website:a,url:t,referrer:e})),L=(t,e,a=N,r=f)=>j("event",p(O(),{website:r,url:a,event_name:t,event_data:e})),D=t=>{const e=t.querySelectorAll("[class*='umami--']");Array.prototype.forEach.call(e,P)},P=t=>{const e=t.getAttribute.bind(t);(e("class")||"").split(" ").forEach((a=>{if(!T.test(a))return;const[,r,i]=a.split("--"),s=A[a]?A[a]:A[a]=a=>{"click"!==r||"A"!==t.tagName||a.ctrlKey||a.shiftKey||a.metaKey||a.button&&1===a.button||e("target")?L(i):(a.preventDefault(),L(i).then((()=>{const t=e("href");t&&(n.href=t)})))};t.addEventListener(r,s,!0)}))},_=(t,e,a)=>{if(!a)return;$=N;const r=a.toString();N="http"===r.substring(0,4)?"/"+r.split("/").splice(3).join("/"):r,N!==$&&K()};if(!t.umami){const e=t=>L(t);e.trackView=K,e.trackEvent=L,t.umami=e}if(y&&!m()){o.pushState=h(o,"pushState",_),o.replaceState=h(o,"replaceState",_);const t=()=>{"complete"===s.readyState&&(K(),w&&(D(s),new MutationObserver((t=>{t.forEach((t=>{const e=t.target;P(e),D(e)}))})).observe(s,{childList:!0,subtree:!0})))};s.addEventListener("readystatechange",t,!0),t()}})(window);