{"version":3,"file":"info-injector.preload.js","mappings":";;;;;;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACjBO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;;;ACvB0E;AAC1E;AACA;AACA;AACA;AACO,2BAA2B,cAAc;AACzC;AACP;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,YAAY;AACrD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACO,kBAAkB,0BAA0B;AACnD;AACA;AACA;AACA,yBAAyB,KAAK;AAC9B;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA,6BAA6B,kBAAkB;AAC/C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;;ACjFyC;AACV;AAC/B;AACA;AACA;AACA;AACA;AACO;AACP,sBAAsB;AACtB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,mBAAM;AACtB,uBAAuB,qBAAqB;AAC5C;AACO,eAAe,iBAAI,sBAAsB;AAChD,sBAAsB;AACtB;AACA;;;ACrCyC;AACV;AACxB,eAAe,oBAAG;AACzB;AACA;AACO,SAAS,uBAAM;AACtB,uBAAuB,yBAAyB;AAChD;;;ACPO,eAAe,UAAI,uBAAuB;AACjD;AACA;AACA;AACA;AACA;AACA;;;ACN+B;AACxB,eAAe,iBAAG;AACzB,iBAAiB,UAAI;AACrB;AACO;AACP,iBAAiB,UAAI;AACrB;;;ACNyC;AACV;AACxB,eAAe,kBAAG;AACzB,sBAAsB;AACtB;AACA;AACO,SAAS,qBAAM;AACtB,uBAAuB,uBAAuB;AAC9C;;;ACRyC;AACV;AACxB;AACP,sBAAsB;AACtB;AACA;AACO;AACP,sBAAsB;AACtB;AACA;AACO,eAAe,oBAAG;AACzB;AACA;AACO;AACP;AACA;AACO,SAAS,uBAAM;AACtB,uBAAuB,yBAAyB;AAChD;AACO;AACP,sBAAsB;AACtB;AACA;;;ACtByC;AAClC,SAAS,wBAAM;AACtB,uBAAuB,iCAAiC;AACxD;;;ACHyC;AACV;AACxB;AACP,sBAAsB;AACtB;AACA;AACO;AACP;AACA;AACO,SAAS,qBAAM;AACtB,uBAAuB,uBAAuB;AAC9C;;;ACXyC;AACV;AACxB,eAAe,0BAAG;AACzB,sBAAsB;AACtB;AACA;AACO,eAAe,0BAAG;AACzB,gGAAgG;AAChG;AACO;AACP;AACA;AACO;AACP;AACA;AACO,SAAS,6BAAM;AACtB,uBAAuB,+BAA+B;AACtD;AACO,eAAe,6BAAM;AAC5B,sBAAsB;AACtB;AACA;;;ACrB4B;AACM;AACI;AACM;AACI;AACA;AACF;AACN;AACkB;AACM;AACtB;AACM;AACF;AACE;AACN;AACM;AACU;AACM;;;ACjBzD;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;;ACPO;AACA;;;ACD6C;AACP;AACc;AAC3D;AACA;AACA;AACA,eAAe,qBAAO;AACtB,iBAAiB,gBAA+B;AAChD;AACA;AACA;AACA,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA,WAAW,gBAAgB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,qBAAO;AAC7C;AACA;AACA;AACA,KAAK;AACL,qCAAqC,UAAU;AAC/C;AACA,SAAS,mBAAK;AACd;AACA;AACA,mBAAK;;;AClC2B;AACM","sources":["webpack://adblockplus/./src/core/messaging/shared/emitter.ts","webpack://adblockplus/./src/core/messaging/shared/messaging.ts","webpack://adblockplus/./src/core/messaging/front/messaging.ts","webpack://adblockplus/./src/core/messaging/front/category-app.ts","webpack://adblockplus/./src/core/messaging/front/category-filters.ts","webpack://adblockplus/./src/core/messaging/front/utils.ts","webpack://adblockplus/./src/core/messaging/front/category-info.ts","webpack://adblockplus/./src/core/messaging/front/category-prefs.ts","webpack://adblockplus/./src/core/messaging/front/category-premium.ts","webpack://adblockplus/./src/core/messaging/front/category-requests.ts","webpack://adblockplus/./src/core/messaging/front/category-stats.ts","webpack://adblockplus/./src/core/messaging/front/category-subscriptions.ts","webpack://adblockplus/./src/core/messaging/front/index.ts","webpack://adblockplus/./src/info-injector/shared/info-injector.types.ts","webpack://adblockplus/./src/info-injector/content/info-injector.types.ts","webpack://adblockplus/./src/info-injector/content/info-injector.ts","webpack://adblockplus/./src/info-injector/content/index.ts"],"sourcesContent":["export class MessageEmitter {\n    constructor() {\n        this.listeners = new Set();\n    }\n    addListener(listener) {\n        this.listeners.add(listener);\n    }\n    removeListener(listener) {\n        this.listeners.delete(listener);\n    }\n    dispatch(message, sender) {\n        const results = [];\n        for (const listener of this.listeners) {\n            results.push(listener(message, sender));\n        }\n        return results;\n    }\n}\n","export function getMessageResponse(responses) {\n    for (const response of responses) {\n        if (typeof response !== \"undefined\") {\n            return response;\n        }\n    }\n}\nexport function isEventMessage(candidate) {\n    return isMessage(candidate) && \"action\" in candidate && \"args\" in candidate;\n}\nexport function isMessage(candidate) {\n    return (candidate !== null && typeof candidate === \"object\" && \"type\" in candidate);\n}\nexport function isListenMessage(candidate) {\n    return isMessage(candidate) && \"filter\" in candidate;\n}\nexport function isPremiumActivateOptions(candidate) {\n    return (candidate !== null && typeof candidate === \"object\" && \"userId\" in candidate);\n}\nexport function isPremiumSubscriptionsAddRemoveOptions(candidate) {\n    return (candidate !== null &&\n        typeof candidate === \"object\" &&\n        \"subscriptionType\" in candidate);\n}\n","import { MessageEmitter, getMessageResponse, isMessage } from \"../shared\";\nlet port;\nconst connectListeners = new Set();\nconst disconnectListeners = new Set();\nconst messageListeners = new Set();\nexport const messageEmitter = new MessageEmitter();\nexport function addConnectListener(listener) {\n    connectListeners.add(listener);\n    listener();\n}\nexport function addDisconnectListener(listener) {\n    disconnectListeners.add(listener);\n}\nexport function addMessageListener(listener) {\n    messageListeners.add(listener);\n}\nconst connect = () => {\n    if (port) {\n        return port;\n    }\n    try {\n        port = browser.runtime.connect({ name: \"ui\" });\n    }\n    catch (ex) {\n        port = null;\n        disconnectListeners.forEach((listener) => {\n            listener();\n        });\n        return port;\n    }\n    port.onMessage.addListener((message) => {\n        onMessage(message);\n    });\n    port.onDisconnect.addListener(onDisconnect);\n    connectListeners.forEach((listener) => {\n        listener();\n    });\n    return port;\n};\nexport function listen({ type, filter, ...options }) {\n    addConnectListener(() => {\n        if (port) {\n            port.postMessage({\n                type: `${type}.listen`,\n                filter,\n                ...options\n            });\n        }\n    });\n}\nfunction onDisconnect() {\n    port = null;\n    setTimeout(() => connect(), 100);\n}\nfunction onMessage(message) {\n    if (!message.type.endsWith(\".respond\")) {\n        return;\n    }\n    messageListeners.forEach((listener) => {\n        listener(message);\n    });\n}\nexport function removeDisconnectListener(listener) {\n    disconnectListeners.delete(listener);\n}\nfunction start() {\n    connect();\n    if (typeof browser.devtools === \"undefined\") {\n        browser.runtime.onMessage.addListener((message, sender) => {\n            if (!isMessage(message)) {\n                return;\n            }\n            const responses = messageEmitter.dispatch(message, sender);\n            const response = getMessageResponse(responses);\n            if (typeof response === \"undefined\") {\n                return;\n            }\n            return Promise.resolve(response);\n        });\n    }\n}\nstart();\n","import * as messaging from \"./messaging\";\nimport { send } from \"./utils\";\nconst platformToStore = new Map([\n    [\"chromium\", \"chrome\"],\n    [\"edgehtml\", \"edge\"],\n    [\"gecko\", \"firefox\"]\n]);\nexport async function get(what) {\n    const options = { what };\n    return await send(\"app.get\", options);\n}\nexport async function getInfo() {\n    var _a;\n    const [application, platform] = await Promise.all([\n        get(\"application\"),\n        get(\"platform\")\n    ]);\n    let store;\n    if (application !== \"edge\" && application !== \"opera\") {\n        store = (_a = platformToStore.get(platform)) !== null && _a !== void 0 ? _a : \"chrome\";\n    }\n    else {\n        store = application;\n    }\n    return {\n        application,\n        manifestVersion: browser.runtime.getManifest().manifest_version,\n        platform,\n        store\n    };\n}\nexport function listen(filter) {\n    messaging.listen({ type: \"app\", filter });\n}\nexport async function open(what, parameters = {}) {\n    const options = { what, ...parameters };\n    await send(\"app.open\", options);\n}\n","import * as messaging from \"./messaging\";\nimport { send } from \"./utils\";\nexport async function get() {\n    return await send(\"filters.get\");\n}\nexport function listen(filter) {\n    messaging.listen({ type: \"filters\", filter });\n}\n","export async function send(sendType, options = {}) {\n    const args = {\n        ...options,\n        type: sendType\n    };\n    return await browser.runtime.sendMessage(args);\n}\n","import { send } from \"./utils\";\nexport async function get() {\n    return await send(\"info.get\");\n}\nexport async function getInjectionInfo() {\n    return await send(\"info.getInjectionInfo\");\n}\n","import * as messaging from \"./messaging\";\nimport { send } from \"./utils\";\nexport async function get(key) {\n    const options = { key };\n    return await send(\"prefs.get\", options);\n}\nexport function listen(filter) {\n    messaging.listen({ type: \"prefs\", filter });\n}\n","import * as messaging from \"./messaging\";\nimport { send } from \"./utils\";\nexport async function activate(userId) {\n    const options = { userId };\n    return await send(\"premium.activate\", options);\n}\nexport async function add(subscriptionType) {\n    const options = { subscriptionType };\n    await send(\"premium.subscriptions.add\", options);\n}\nexport async function get() {\n    return await send(\"premium.get\");\n}\nexport async function getPremiumSubscriptionsState() {\n    return await send(\"premium.subscriptions.getState\");\n}\nexport function listen(filter) {\n    messaging.listen({ type: \"premium\", filter });\n}\nexport async function remove(subscriptionType) {\n    const options = { subscriptionType };\n    await send(\"premium.subscriptions.remove\", options);\n}\n","import * as messaging from \"./messaging\";\nexport function listen(filter, tabId) {\n    messaging.listen({ type: \"requests\", filter, tabId });\n}\n","import * as messaging from \"./messaging\";\nimport { send } from \"./utils\";\nexport async function getBlockedPerPage(tab) {\n    const options = { tab };\n    return await send(\"stats.getBlockedPerPage\", options);\n}\nexport async function getBlockedTotal() {\n    return await send(\"stats.getBlockedTotal\");\n}\nexport function listen(filter) {\n    messaging.listen({ type: \"stats\", filter });\n}\n","import * as messaging from \"./messaging\";\nimport { send } from \"./utils\";\nexport async function add(url) {\n    const options = { url };\n    return await send(\"subscriptions.add\", options);\n}\nexport async function get(options) {\n    return await send(\"subscriptions.get\", options !== null && options !== void 0 ? options : {});\n}\nexport async function getInitIssues() {\n    return await send(\"subscriptions.getInitIssues\");\n}\nexport async function getRecommendations() {\n    return await send(\"subscriptions.getRecommendations\");\n}\nexport function listen(filter) {\n    messaging.listen({ type: \"subscriptions\", filter });\n}\nexport async function remove(url) {\n    const options = { url };\n    await send(\"subscriptions.remove\", options);\n}\n","export * from \"./messaging\";\nexport * from \"./messaging.types\";\nexport * as app from \"./category-app\";\nexport * as App from \"./category-app.types\";\nexport * as ctalinks from \"./category-ctalinks\";\nexport * as doclinks from \"./category-doclinks\";\nexport * as filters from \"./category-filters\";\nexport * as info from \"./category-info\";\nexport * as notifications from \"./category-notifications\";\nexport * as Notifications from \"./category-notifications.types\";\nexport * as prefs from \"./category-prefs\";\nexport * as Prefs from \"./category-prefs.types\";\nexport * as premium from \"./category-premium\";\nexport * as requests from \"./category-requests\";\nexport * as stats from \"./category-stats\";\nexport * as Stats from \"./category-stats.types\";\nexport * as subscriptions from \"./category-subscriptions\";\nexport * as Subscriptions from \"./category-subscriptions.types\";\n","export const injectionOrigins = [\n    \"https://adblockplus.org\",\n    \"https://accounts.adblockplus.org\",\n    \"https://new.adblockplus.org\",\n    \"https://welcome.adblockplus.org\",\n    \"https://getadblock.com\",\n    \"https://vpn.getadblock.com\"\n];\n","export const nodeId = \"__adblock-plus-extension-info\";\nexport const datasetKey = \"adblockPlusExtensionInfo\";\n","import * as messaging from \"~/core/messaging/front\";\nimport { injectionOrigins } from \"../shared\";\nimport { datasetKey, nodeId } from \"./info-injector.types\";\nfunction getDocumentReference() {\n    return window.document;\n}\nasync function getInfo() {\n    return await messaging.info.getInjectionInfo();\n}\nfunction createInfoElement(document, info) {\n    const element = document.createElement(\"div\");\n    element.id = nodeId;\n    element.style.display = \"none\";\n    element.textContent = info;\n    return element;\n}\nfunction isRelevantOrigin(origin) {\n    return injectionOrigins.includes(origin);\n}\nasync function injectInfo() {\n    const document = getDocumentReference();\n    if (!isRelevantOrigin(document.location.origin)) {\n        return;\n    }\n    const info = JSON.stringify(await getInfo());\n    const element = createInfoElement(document, info);\n    document.addEventListener(\"DOMContentLoaded\", () => {\n        document.body.appendChild(element);\n    });\n    document.documentElement.dataset[datasetKey] = info;\n}\nfunction start() {\n    void injectInfo();\n}\nstart();\n","export * from \"./info-injector\";\nexport * from \"./info-injector.types\";\n"],"names":[],"sourceRoot":""}